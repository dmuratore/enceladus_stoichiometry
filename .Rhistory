quantile(10^(errors+sample_intercepts+5*sample_slopes),c(0.05,0.95))
quantile(10^(errors+sample_intercepts+5*sample_slopes),c(0.10,0.9))
quantile(10^(errors+sample_intercepts+5*sample_slopes),c(0.25,0.75))
predict(ols_model,data.frame(dissolved_stoich=c(1e5,3.7*1e3,5.6*1e4,15,1124,10)))
predict(ols_model,data.frame(dissolved_stoich=c(1e5,3.7*1e3,5.6*1e4,15,1124,10)),interval=0.95)
?predict.lm
predict(ols_model,data.frame(dissolved_stoich=c(1e5,3.7*1e3,5.6*1e4,15,1124,10)),interval='confidence')
meow<-predict(ols_model,data.frame(dissolved_stoich=c(1e5,3.7*1e3,5.6*1e4,15,1124,10)),interval='confidence')
apply(meow,2,function(x) 10^x)
10^1.9
10^2.9
mortality_plot<-ggplot(chemostat_biomass_data)+
geom_point(aes(y=1/`Flow (Mortality) Rate (same units as growth rate)`,
x=`Steady State Biomass (cells/ml)`,
col=p_molar))+
scale_y_log10(name='Cell Turnover Time [hr(?)]')+
scale_x_log10(name='Steady State Cells/mL')+
cmocean::scale_color_cmocean(name='thermal',trans='log10',direction=1)+
guides(color=guide_colorbar(title='Dissolved PO4\nConcentration [M]',
barwidth=unit(0.35,'npc')))+
theme_bw()+
theme(text=element_text(size=14),
legend.position='bottom',
axis.text.x=element_text(size=14),
legend.text=element_text(size=8))
library(tidyverse)
mortality_plot<-ggplot(chemostat_biomass_data)+
geom_point(aes(y=1/`Flow (Mortality) Rate (same units as growth rate)`,
x=`Steady State Biomass (cells/ml)`,
col=p_molar))+
scale_y_log10(name='Cell Turnover Time [hr(?)]')+
scale_x_log10(name='Steady State Cells/mL')+
cmocean::scale_color_cmocean(name='thermal',trans='log10',direction=1)+
guides(color=guide_colorbar(title='Dissolved PO4\nConcentration [M]',
barwidth=unit(0.35,'npc')))+
theme_bw()+
theme(text=element_text(size=14),
legend.position='bottom',
axis.text.x=element_text(size=14),
legend.text=element_text(size=8))
mortality_plot
ggplot(stoich_data)+
geom_point(aes(x=n_redox,y=`Phytoplankton quota(mol:mol C)`,
col=block))+
ggrepel::geom_label_repel(aes(x=n_redox,y=`Phytoplankton quota(mol:mol C)`,
col=block,label=Element))+
scale_color_brewer(name='Element Block',palette='Set1')+
guides(color=guide_legend(override.aes=list(shape=1)))+
scale_y_log10()+
ylab('Phytoplankton Cell Quota Relative to C')+
xlab('Number of Common Redox States')+
theme_bw()
source('scripts/scaling_functions.R')
## Read in data
methanogen_table<-readxl::read_xlsx('data/dsac048_suppl_supplementary_tables.xlsx',
skip=1)
psychrophiles<-methanogen_table %>%
filter(`Assembly Level`=='Complete Genome',
(`temperature group`=='psychrotolerant'|`T min`<=0)) %>%
drop_na(`T min`)
### The purpose of this script is to run the analyses for the
## Macromolecular scaling from the methanogen genomic database
## cited in the main text, described in Methods
## Loading libraries
library(tidyverse)
library(MASS)
psychrophiles<-methanogen_table %>%
filter(`Assembly Level`=='Complete Genome',
(`temperature group`=='psychrotolerant'|`T min`<=0)) %>%
drop_na(`T min`)
summary(lm(log(`Genome Size [bp]`)~rank(1/`Genome Size [bp]`),
data=methanogen_table %>% filter(`Assembly Level`=='Complete Genome',
!is.na(`temperature group`))))
summary(lm(log10(`Genome Size [bp]`)~rank(1/`Genome Size [bp]`),
data=methanogen_table %>% filter(`Assembly Level`=='Complete Genome',
!is.na(`temperature group`))))
ggplot(full_methanogens)+
geom_freqpoly(aes(x=log10(`Genome Size [bp]`),col='Observed Genome Lengths'),stat='density',
linewidth=2)+
stat_function(fun=dgamma,args=list(shape=out$estimate[1],
rate=out$estimate[2]),aes(col='Single Gamma'),
linetype='dashed')+
stat_function(fun=function(x) (out2$lambda[1]*dgamma(x,
shape=out2$gamma.pars[1,1],
scale=out2$gamma.pars[2,1])+
out2$lambda[2]*dgamma(x,
shape=out2$gamma.pars[1,2],
scale=out2$gamma.pars[2,2])+
out2$lambda[3]*dgamma(x,
shape=out2$gamma.pars[1,3],
scale=out2$gamma.pars[1,3])),
aes(col='Gamma Mixture'),
linetype='dashed')+
theme_bw()+
scale_color_manual(values=c('black',
'gold3',
'blue3')[c(2,1,3)],
labels=c('Observed Genome Lengths',
'Gamma Mixture',
'Single Gamma')[c(2,1,3)],
name='Fit')+
ylab('Density')+
xlab('Log10 Genome bp')
## Plotting macromolecular component
ggplot(theoretical_psd)+
geom_line(aes(x=vol,y=pg_prot*dn,
col='Protein'))+
geom_line(aes(x=vol,y=pg_genome*dn,
col='Genome'))+
geom_line(aes(x=vol,y=pg_ribo*dn,
col='Ribosome'))+
geom_line(aes(x=vol,y=pg_lipid*dn,
col='Lipid'))+
geom_line(aes(x=vol,y=pg_carb*dn,
col='Carbohydrate'))+
theme_bw()+
xlab('Volume [um^3]')+
scale_y_log10(name='Weighted Molecule Abundance')+
scale_color_manual(name='Macromolecule',
labels=c('Carbohydrate',
'Genome',
'Lipid',
'Protein',
'Ribosome'),
values=c('brown4',
'magenta2',
'darkgreen',
'midnightblue',
'purple2'))
ggplot(community_frame)+
geom_bar(position='stack',aes(fill=factor(molecule,
levels=c('Protein',
'Lipid',
'Carbs',
'Ribo',
'Genome')),
y=value/sum(value),
x=1),stat='identity')+
scale_fill_manual(name='Macromolecule',
labels=c('Carbohydrate',
'Genome',
'Lipid',
'Protein',
'Ribosome')[c(4,3,1,5,2)],
values=c('brown4',
'magenta2',
'darkgreen',
'midnightblue',
'purple2')[c(4,3,1,5,2)])+
ylab('Proportion Total Composition')+
theme_minimal()+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank())
ggplot(stoich_long %>% mutate(Element=factor(Element,
levels=c('pg_C','pg_N','pg_P'),
labels=c('C','N','P')),
macromolecule=factor(macromolecule,
levels=c('protein','lipid',
'carbs','ribosome',
'genome'))))+
geom_col(aes(x=pg,y=forcats::fct_rev(Element),fill=macromolecule),
col='white')+
theme_bw()+
ylab('')+
xlab('pg Element Integrated Over PSD')+
scale_fill_manual(name='Macromolecule',
labels=c('Carbohydrate',
'Genome',
'Lipid',
'Protein',
'Ribosome')[c(4,3,1,5,2)],
values=c('brown4',
'magenta2',
'darkgreen',
'midnightblue',
'purple2')[c(4,3,1,5,2)])
##Plotting
element_allo<-ggplot(psd_with_element)+
geom_line(aes(x=vol^(1/3)*0.75/pi,y=total_C,
col='C'))+
geom_line(aes(x=vol^(1/3)*0.75/pi,y=total_N,
col='N'))+
geom_line(aes(x=vol^(1/3)*0.75/pi,y=total_P,
col='P'))+
scale_y_log10()+
xlab('Cell Radius [um]')+
ylab('pg DW Element')+
theme_bw()+
scale_color_brewer(name='Element',palette='Set1')
element_allo
element_dist<-ggplot(psd_with_element)+
geom_line(aes(x=vol^(1/3)*0.75/pi,y=total_C*dn,
col='C'))+
geom_line(aes(x=vol^(1/3)*0.75/pi,y=total_N*dn,
col='N'))+
geom_line(aes(x=vol^(1/3)*0.75/pi,y=total_P*dn,
col='P'))+
scale_y_log10()+
xlab('Cell Radius [um]')+
ylab('pg DW Element')+
theme_bw()+
scale_color_brewer(name='Element',palette='Set1')
element_dist
macro_scale<-ggplot(psd_element)+
geom_col(aes(x=vol^(1/3)*0.75/pi,
y=value,
fill=factor(mac,
levels=c('prot','lip','carb','gen','ribo'),
labels=c('Protein','Lipid','Carbohydrate','Genome',
'Ribosome'))))+
facet_wrap(~element,ncol=1,scale='free_y')+
scale_fill_manual(name='Macromolecule',
labels=c('Carbohydrate',
'Genome',
'Lipid',
'Protein',
'Ribosome')[c(4,3,1,5,2)],
values=c('brown4',
'magenta2',
'darkgreen',
'midnightblue',
'purple2')[c(4,3,1,5,2)])+
theme_bw()+
ylab('Mass Element [pg]')+
xlab('Cell radius [um]')+
scale_x_log10()+
theme(strip.background=element_blank(),
strip.text=element_text(size=14,face='bold'))
macro_sclae
macro_scale
source("~/repos/enceladus_stoichiometry/methanogen_stoich.R", echo=TRUE)
## Creating F1
biomass_heatmap<-ggplot(chemostat_biomass_data)+
geom_raster(aes(x=p_molar,y=`Relative Energy Availability (fraction of Earth)`,
fill=`Steady State Biomass (cells/ml)`))+
geom_contour2(aes(x=p_molar,
y=`Relative Energy Availability (fraction of Earth)`,
z=`Steady State Biomass (cells/ml)`,
label=..level..),
breaks=10^seq(3,14,by=1),
fontface='bold',
label_colour='white',
color='white')+
scale_y_log10(expand=c(0,0),name='Relative Growth Efficiency')+
scale_x_log10(expand=c(0,0),name='Dissolved PO4 Concentration [M]')+
cmocean::scale_fill_cmocean(name='deep',trans='log10',direction=-1)+
geom_hline(linetype='dashed',col='white',yintercept=0.68)+
geom_label(aes(x=1e-3,y=0.68,label='Fast-Growing E. coli'))+
geom_hline(linetype='dashed',col='white',yintercept=5.56*1e-7)+
geom_label(aes(x=1e-3,y=5.56*1e-7,label='Marine Sediment Bacteria'))+
guides(fill=guide_colorbar(title='Steady State Cells/mL',
barwidth=unit(0.5,'npc')))+
theme_bw()+
theme(text=element_text(size=14),
legend.position='bottom',
axis.text.x=element_text(size=8))
library(metR)
## Creating F1
biomass_heatmap<-ggplot(chemostat_biomass_data)+
geom_raster(aes(x=p_molar,y=`Relative Energy Availability (fraction of Earth)`,
fill=`Steady State Biomass (cells/ml)`))+
geom_contour2(aes(x=p_molar,
y=`Relative Energy Availability (fraction of Earth)`,
z=`Steady State Biomass (cells/ml)`,
label=..level..),
breaks=10^seq(3,14,by=1),
fontface='bold',
label_colour='white',
color='white')+
scale_y_log10(expand=c(0,0),name='Relative Growth Efficiency')+
scale_x_log10(expand=c(0,0),name='Dissolved PO4 Concentration [M]')+
cmocean::scale_fill_cmocean(name='deep',trans='log10',direction=-1)+
geom_hline(linetype='dashed',col='white',yintercept=0.68)+
geom_label(aes(x=1e-3,y=0.68,label='Fast-Growing E. coli'))+
geom_hline(linetype='dashed',col='white',yintercept=5.56*1e-7)+
geom_label(aes(x=1e-3,y=5.56*1e-7,label='Marine Sediment Bacteria'))+
guides(fill=guide_colorbar(title='Steady State Cells/mL',
barwidth=unit(0.5,'npc')))+
theme_bw()+
theme(text=element_text(size=14),
legend.position='bottom',
axis.text.x=element_text(size=8))
library(cmocean)
source("~/repos/enceladus_stoichiometry/chemostat_simulations.R", echo=TRUE)
## Doing a MCMC type sampling of w/exhaustive grid search of 2 things:
## N:P power law exponents e[-1,1] (based on the fact that empirical is close to 0)
## PSDs prior conditioned on terrestrial PSD shapes using Gamma distributions
## Gamma will represent power laws when shape is extreme,
## Increasing PSD when shape is extreme the other way
## 'Humps' for intermediate sizes in other regimes
library(metR)
library(tidyverse)
redfield<-seq(1,100,by=0.5)
alpha<-seq(-1,1,by=0.05)
## Now based on our calculation of the average volume for the
## methanogen dataset from genome scaling, we end up with an average
## volume on the order of 10^-18 m^3, or ~1 um^3.
## We will use this as our 'average volume' to associate with our 'redfield'
## characteristic number
char_vol<-1e-18
## This lets us calculate the intercept by doing the following operation
gamma0<-c()
k<-1
for(i in 1:length(redfield)){
for(j in 1:length(alpha)){
gamma0[k]<-exp(log(redfield[i])-alpha[j]*log(char_vol))
k<-k+1
print(k)
}
}
scaling_distribution<-data.frame(g=gamma0,
a=rep(alpha,length(redfield)),
mid=rep(redfield,each=length(alpha)))
ggplot(scaling_distribution)+
geom_raster(aes(x=mid,y=a,fill=g))+
theme_bw()+
scale_x_continuous(expand=c(0,0))+
scale_y_continuous(expand=c(0,0))+
geom_point(aes(x=10,y=0.03),
size=2)+
scale_fill_viridis_c(name='Intercept',trans='log10')+
guides(fill=guide_colorbar(barwidth=unit(0.5,'npc')))+
xlab('Redfield-Type Characteristic N:P')+
ylab('N:P Scaling Exponent')+
theme(legend.position='bottom')
## Now we're going to simulate potential size distributions
## Assume everything is a power law size distribution and vary
## the exponent from 0 to -3 and simulate from a volume range from
## 10^-20 m^3 to 10^-17 m^3
psd_exp<-seq(-3,0,by=0.05)
psd_range<-10^seq(-20,-17,by=0.05)
psd_matrix<-matrix(data=NA,nrow=length(psd_exp),
ncol=length(psd_range))
for(i in 1:length(psd_exp)){
psd_matrix[i,]<-psd_range^psd_exp[i]/sum(psd_range^psd_exp[i])
}
integrate_stoich<-function(psd,vol,a,g){
scales<-g*vol^a
total<-sum(psd*scales)
return(total)
}
## Now we sample from the parameter space
out<-c()
k<-1
for(i in 1:nrow(scaling_distribution)){
for(j in 1:nrow(psd_matrix)){
out[k]<-integrate_stoich(psd=psd_matrix[j,],
vol=psd_range,
a=scaling_distribution$a[i],
g=scaling_distribution$g[i])
k<-k+1
print(k/(nrow(scaling_distribution)*nrow(psd_matrix)))
}
}
full_par_frame<-data.frame(result=out,
alpha=rep(scaling_distribution$a,
each=length(psd_exp)),
gamma=rep(scaling_distribution$g,
each=length(psd_exp)),
mid=rep(scaling_distribution$mid,
each=length(psd_exp)),
exp=rep(psd_exp,
nrow(scaling_distribution)))
hold_alpha<-ggplot(full_par_frame %>% group_by(exp,alpha) %>%
summarize(mean_result=10^mean(log10(result))))+
geom_raster(aes(x=exp,y=alpha,fill=mean_result))+
scale_fill_viridis_c(name='N:P',trans='log10')+
theme_bw()+
scale_x_continuous(expand=c(0,0))+
scale_y_continuous(expand=c(0,0))+
xlab('Cell Size-Abundance Scaling Exponent')+
ylab('N:P Scaling Exponent')+
stat_contour2(aes(x=exp,y=alpha,z=mean_result,
label=after_stat(level)),
breaks=c(1,5,10,50,100,500,1000))+
geom_point(aes(x=-1,y=0.03),size=4,col='white')+
ggrepel::geom_label_repel(data=data.frame(),
aes(x=-1,y=0.03,label='Earth Conditions'),
size=4)
hold_mid<-ggplot(full_par_frame %>% group_by(exp,mid) %>%
summarize(mean_result=10^mean(log10(result))))+
geom_raster(aes(x=exp,y=mid,fill=mean_result))+
scale_fill_viridis_c(name='N:P',trans='log10')+
theme_bw()+
scale_x_continuous(expand=c(0,0))+
scale_y_continuous(expand=c(0,0))+
xlab('Cell Size-Abundance Scaling Exponent')+
ylab('N:P Scaling Intercept\n(N:P For 1 um Diameter Cell)')+
stat_contour2(aes(x=exp,y=mid,z=mean_result,
label=after_stat(level)),
breaks=c(1,5,10,50,100,500,1000))+
geom_point(aes(x=-1,y=16),
size=4,col='white')+
ggrepel::geom_label_repel(data=data.frame(),
aes(x=-1,y=16,label='Earth Conditions'),
size=4)
hold_alpha/hold_mid+plot_annotation(tag_levels='A')
density<-ggplot()+
geom_density(aes(x=log10(result),
fill='All Earthlike Parameters'),data=earth_all,
alpha=0.5)+
geom_density(aes(x=log10(result),
fill='Earth N:P Scaling'),data=earth_alpha,
alpha=0.5)+
geom_density(aes(x=log10(result),
fill='Earth Size Distribution'),
data=earth_psd,alpha=0.5)+
geom_density(aes(x=log10(result),
fill='All Models'),data=full_par_frame,
alpha=0.5)+
geom_density(aes(x=log10(result),
fill='Redfield Average Stoichiometry'),data=earth_mid,
alpha=0.5)+
theme_bw()+
xlab('Log10 Ecosystem N:P')+
scale_fill_brewer(palette='Accent',name='Parameter Space',
breaks=c('All Models',
'Earth Size Distribution',
'Redfield Average Stoichiometry',
'Earth N:P Scaling',
'All Earthlike Parameters'))+
ylab('PDF Over Parameter Set')
density
## Writing extended data files
write.csv('data/parameter_search_simulations.csv',full_par_frame)
?write.csv
## Writing extended data files
write.csv(full_par_frame,'data/parameter_search_simulations.csv')
## Reading in data
stoich_data<-data.table::fread('data/Stoichiometries-Moore.csv')
stoich_data<-stoich_data %>%
mutate(dissolved_rat=`Mean ocean concentration(umol kg)`/2247) %>%
drop_na(`Mean ocean concentration(umol kg)`) %>%
arrange(desc(`Phytoplankton quota(mol:mol C)`))
plot(cell_quotas,dissolved_stoich,log='xy')
plot(bayes_linear$y,bayes_linear$yHat)
points(bayes_linear$y,bayes_linear$yHat+bayes_linear$SD.yHat,
col='red')
points(bayes_linear$y,bayes_linear$yHat-bayes_linear$SD.yHat,
col='blue')
abline(a=0,b=1)
write.csv(ratio_analysis,'data/dissolved_particulate_ratios.csv')
## Creating figure 4A
joint_dist<-ggplot(ratio_analysis)+
geom_density_2d_filled(aes(y=log10(bio),x=log10(abio)))+
geom_abline(slope=1,intercept=0,col='white',size=2,linetype='dashed')+
geom_abline(slope=bayes_linear$bR,
intercept=bayes_linear$mu,
col='white',
size=2)+
geom_point(aes(x=log10(abio),y=log10(bio)),
shape=1,size=1.5,col='white')+
ggrepel::geom_label_repel(data=filter(ratio_analysis,combo %in% c('C_N','C_P',
'N_P','P_Fe',
'N_Fe','C_Fe',
'N_Mg','C_Mg','P_Mg')),
aes(x=log10(abio),
y=log10(bio),
label=paste0(main_element,'/',secondary_element)))+
scale_y_continuous(expand=c(0,0),
name='Log10 Phytoplankton Stoichiometry',
breaks=seq(0,7,by=1))+
scale_x_continuous(expand=c(0,0),
name='Log10 Seawater Stoichiometry',
breaks=seq(-6,10,by=2))+
scale_fill_viridis_d(option='B',name='Probability Density')+
theme_bw()+
theme(legend.position='bottom')
ggplot(ratio_analysis)+
geom_point(aes(x=log10(abio),y=log10(bio)))+
scale_y_continuous(expand=c(0,0),
name='Log10 Cellular Quota')+
scale_x_continuous(expand=c(0,0),
name='Log10 Seawater Stoichiometry')+
geom_smooth(aes(x=log10(abio),y=log10(bio)),
method='lm')+
scale_fill_viridis_d(option='B',name='Probability Density')+
theme_bw()+
theme(legend.position='bottom')
## Updating for marginal distributions
out2<-ggExtra::ggMarginal(joint_dist,aes(x=log10(abio),y=log10(bio)),type='histogram')
ggplot(ratio_analysis)+
geom_bar(aes(x=round(log10(bio)),fill=factor(main_element,
levels=unique(main_element))),
col='black')+
scale_fill_discrete(name='Numerator Element')+
theme_bw()+
scale_y_continuous(expand=c(0,0))+
guides(fill=guide_legend(ncol=3))+
ylab('# Ratios')+
xlab('Log10 Cell Quota')
## Creating figure 4B
density_with_mark<-ggplot()+
geom_density(aes(x=log10(result),
col='Simulated Ecosystem'),data=full_par_frame,
alpha=0.5)+
geom_line(aes(x=colMeans(outcome_mat),
y=stoichs/10,
col='Predicted Dissolved'))+
scale_y_continuous(name='PDF Over Parameter Search',
sec.axis=sec_axis(trans=~.*10,
name='Log10 Observable Dissolved N:P'))+
theme_bw()+
scale_color_manual(name='',values=c('midnightblue','gold3'))+
xlab('Log10 Ecosystem N:P')+
theme(legend.position='bottom')
p_mass
source("~/repos/enceladus_stoichiometry/stoichiometry.R", echo=TRUE)
source("~/repos/enceladus_stoichiometry/wrapper_script.R", echo=TRUE)
source("~/repos/enceladus_stoichiometry/wrapper_script.R", echo=TRUE)
source("~/repos/enceladus_stoichiometry/wrapper_script.R", echo=TRUE)
source('scripts/figure1_script.R')
